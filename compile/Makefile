#########################################################################
#									#
#									#
#  Makefile for the i386_amd64_qemu_pc version of Xinu			#
#             Ex VBOX version of Xinu, using as much as possible	#
#			from the Galileo code				#
#									#
#  includes: .deps and .defs						#
#									#
#									#
#########################################################################

COMPILER_ROOT	=	/usr/bin/
PNAME		=	i386_amd64_qemu_pc
PLAT		=	Platform_$(PNAME)
TOPDIR		=	..

CC		=	${COMPILER_ROOT}gcc
LD		=	${COMPILER_ROOT}ld
OBJCOPY		=	${COMPILER_ROOT}objcopy
XINU		=	$(TOPDIR)/compile/xinu.elf
XINUBIN		=	$(TOPDIR)/compile/xinu.bin
XINUXBIN	=	$(TOPDIR)/compile/xinu
MAKEXBIN 	=	$(TOPDIR)/compile/bin/buildxbin
BUILDMAKE	=	$(TOPDIR)/compile/bin/build-make

MAKEDEP		=	$(CC) -M -MG

DEPSFILE	=	.deps
DEFSFILE	=	.defs
VERSIONFILE	=	version
LDSCRIPT	=	ld.script
MKVERS		=	$(TOPDIR)/compile/bin/mkvers
REBUILDFLAGS	=	-s $(TOPDIR)/system  debug.c 	\
			-s $(TOPDIR)/lib			\
			-s $(TOPDIR)/device/tty			\
			-s $(TOPDIR)/device/nam			\
			-s $(TOPDIR)/device/eth			\
			-s $(TOPDIR)/device/rds			\
			-s $(TOPDIR)/device/ram			\
			-s $(TOPDIR)/device/lfs			\
			-s $(TOPDIR)/device/rfs			\
			-s $(TOPDIR)/device/vga			\
			-s $(TOPDIR)/device/mice		\
			-s $(TOPDIR)/device/kbd			\
			-s $(TOPDIR)/net  'arp_dump*'  		\
				'dhcp_dump*'  pxe.c		\
			-s $(TOPDIR)/extras/galaga		\
			-s $(TOPDIR)/extras/arkanoid		\
			-s $(TOPDIR)/extras			\
			-s $(TOPDIR)/extras/vt100		\
			-s $(TOPDIR)/extras/microui		\
			-s $(TOPDIR)/shell  'xsh_rdstest*'

INCLUDE		=	-I$(TOPDIR)/include -I$(TOPDIR)/extras/include

# Amount to move loaded image down in memory

BRELOC  =	0x150000
BOOTPLOC=	0x150000

DEFS		= -DBRELOC=${BRELOC} -DBOOTPLOC=${BOOTPLOC} -DBSDURG -DVERSION=\""`cat $(VERSIONFILE)`"\"
DEFS       += -DX86_QEMU

# Compiler flags
# CFLAGS  = -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib -c -Wall -O0 ${DEFS} ${INCLUDE}
CFLAGS  = -m32 -ffreestanding -fno-builtin -fno-stack-protector -Wno-incompatible-pointer-types -Wno-implicit-function-declaration -Wno-return-mismatch -Wno-int-conversion -nostdlib -c -Wall -O3 ${DEFS} ${INCLUDE}
SFLAGS  = ${INCLUDE}

TMP_FILES = .defs .vers_num disk.is test/img/xinu.elf version xinu.map


# Loader flags
LDFLAGS = -dn -m elf_i386 -nostdlib -Map xinu.map -T $(LDSCRIPT)

all:	xinu

#--------------------------------------------------------------------------------
# Handle generation of a new version string when initialize is recompiled
#--------------------------------------------------------------------------------

newversion:
	@echo creating new version
	@$(MKVERS) $(PNAME) > $(VERSIONFILE)

#--------------------------------------------------------------------------------
# Include generic make targets and rules from the file generated by build-make
#--------------------------------------------------------------------------------
-include $(DEFSFILE)

#--------------------------------------------------------------------------------
# Add files that require special rules and place start.o at the front
#--------------------------------------------------------------------------------
LD_LIST = binaries/start.o $(filter-out binaries/start.o,$(OBJ_FILES))

#------------------------------------------------------------
# Rules for files that need special handling
#------------------------------------------------------------

# Define variables for the Configuration file and generated files

CONFFILE	= $(TOPDIR)/config/Configuration
CONFH		= $(TOPDIR)/include/conf.h
CONFC		= $(TOPDIR)/system/conf.c

# Define variables for the config program and its sources

CONFPGM		= $(TOPDIR)/config/config
CONFL		= $(TOPDIR)/config/config.l
CONFY		= $(TOPDIR)/config/config.y

# Set up the required build directory structure

BLDDIRS	= binaries
export

#--------------------------------------------------------------------------------
# Specific additional rules and exceptions
#--------------------------------------------------------------------------------

# The following inserts 'echo' when run on xinu00
ECHO$(MACHINE) = echo; echo "On Vbox, the following command would be run:  "

xinu:	Makefile rebuild $(BLDDIRS) $(DEFSFILE) $(DEPSFILE) $(CONFH) $(CONFC) $(LD_LIST)
	@echo;echo 'Loading object files to produce GRUB bootable xinu'
	@$(LD) $(LDFLAGS) $(LD_LIST) -o $(XINU) && printf "\n\n\tXINU ready.\n\n\tmake run-qemu    # ...to boot the OS on qemu\n\n"
	

$(BLDDIRS): 
	@mkdir -p $(BLDDIRS)

objects: $(LD_LIST)

$(CONFH): $(CONFFILE) $(CONFPGM)
	@echo making $(CONFH)
	@make configure

$(CONFC): $(CONFFILE) $(CONFPGM)
	@echo making $(CONFC)
	@make configure

$(CONFPGM): $(CONFL) $(CONFY)
	@echo making the config program
	@make -C $(TOPDIR)/config clean all install

configure:
	@echo forcing a rebuild of conf.h and conf.c
	@make newversion
	@(cd $(TOPDIR)/config; make install)

clean:
	@echo removing .o files
	@rm -f ${LD_LIST}
	@echo   removing configuration files ...
	@rm -f $(CONFH) $(CONFC)
	@(cd $(TOPDIR)/config; make clean)
	@echo removing xinu ...
	@rm -f $(XINU)
	@rm -f $(XINUXBIN)
	@rm -f $(TMP_FILES)
	@rm -f disk.iso

#--------------------------------------------------------------------------------
# QEMU grub system image test
#--------------------------------------------------------------------------------
qemu-iso-pre: xinu test/grub/grub.cfg
	rm -rf test/img
	mkdir -p test/img/boot/grub
	cp xinu.elf test/img/
	cp test/grub/grub.cfg test/img/boot/grub

# Generates the Grub2-based ISO - see bochsrc.txt for info.
# Requires grub2-mkrescue and xorriso be installed!
run-qemu: qemu-iso-pre
	echo OTRO GRUB PARA PROBAR: grub-mkrescue -o disk.iso test/img
	grub-mkrescue -d /usr/lib/grub/i386-pc -o disk.iso test/img
	qemu-system-i386 -machine accel=kvm -enable-kvm -drive file=disk.iso,index=0,media=cdrom -netdev user,id=u0 -device e1000-82545em,netdev=u0

run-qemu_rtl8139:
	echo OTRO GRUB PARA PROBAR: grub-mkrescue -o disk.iso test/img
	grub-mkrescue -d /usr/lib/grub/i386-pc -o disk.iso test/img
	qemu-system-i386 -machine accel=kvm -enable-kvm -drive file=disk.iso,index=0,media=cdrom -netdev user,id=u0 -device rtl8139,netdev=u0

#--------------------------------------------------------------------------------
# Locations of source directories and exceptions (.c and .[sS] files to exclude)
#--------------------------------------------------------------------------------
	
$(DEFSFILE):
	@rm -f $(DEFSFILE)
	@echo "" > $(DEFSFILE)
	@make rebuild

$(DEPSFILE):
	@rm -f $(DEPSFILE)
	@echo "" > $(DEPSFILE)
	@make depend

rebuild: $(CONFC)
	@echo Rebuilding the $(DEFSFILE) file
	@$(BUILDMAKE) $(REBUILDFLAGS) > $(DEFSFILE)

defclean:
	rm -f $(DEFSFILE)
	echo "" > $(DEFSFILE)

depend: $(DEFSFILE)
	@echo;echo Making all dependencies in $(DEPSFILE)
	@$(MAKEDEP) ${INCLUDE} ${SRC_FULL} > $(DEPSFILE)
	@echo;echo Finished making dependencies

depclean:
	rm -f $(DEPSFILE)
	echo "" > $(DEPSFILE)

-include $(DEPSFILE)
